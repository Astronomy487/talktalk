class Talktalk{static indicatorBefore="#";static indicatorAfter="";static maxRecursion=10;static directory="talktalk";static checkedSettingsJsonYet=!1;static checkSettingsJson(){if(Talktalk.checkedSettingsJsonYet)return;let t=new XMLHttpRequest;t.open("GET",Talktalk.directory+"/settings.json",!1);try{if(t.send(null),200==t.status)try{let a=JSON.parse(t.responseText);a.indicator&&"string"==typeof a.indicator&&a.indicator.includes("x")&&([Talktalk.indicatorBefore,Talktalk.indicatorAfter]=a.indicator.split("x")),a.fallbackLanguage&&"en"!=a.fallbackLanguage&&(Talktalk.fallbackLanguage=a.fallbackLanguage,Talktalk.setupLangPreferences());try{a.forceLanguageWithQueryParameter&&"string"==typeof a.forceLanguageWithQueryParameter&&(Talktalk.forcedLanguages=new URLSearchParams(window.location.search).get(a.forceLanguageWithQueryParameter).split(","))}catch(e){}a.forceLanguage&&("string"==typeof a.forceLanguage&&(a.forceLanguage=a.forceLanguage.split(",")),Talktalk.forcedLanguages=a.forceLanguage.concat(...Talktalk.forcedLanguages)),a.maxRecursion&&"number"==typeof a.maxRecursion&&(Talktalk.maxRecursion=a.maxRecursion)}catch(n){console.log("Incorrectly formatted JSON found in "+lang+".json!\n"+n)}else throw"Error loading settings JSON: "+t.status+" "+t.statusText}catch(i){}Talktalk.checkedSettingsJsonYet=!0}static wrapInIndicator(t){return Talktalk.indicatorBefore+t+Talktalk.indicatorAfter}static space(t){if(t)return e(t);for(let a of Talktalk.langs)return e(a);function e(t){return["ja","zh","lo","my"].includes(t=Talktalk.shortLang(t))?"":" "}}static shortLang(t){return t.includes("-")&&(t=t.substring(0,t.indexOf("-"))),t}static writingDirection(t){if(t)return e(t);for(let a of Talktalk.langs)return e(a);function e(t){return["ar","arc","az","dhivehi","ff","he","ku","nqo","fa","rhg","syc","syr","ur"].includes(t=Talktalk.shortLang(t))?"rtl":"ltr"}}static getPluralitySequence(t){let a;findPluralityRule:for(let e of Talktalk.langs){a=new Intl.PluralRules(e).select(t);break findPluralityRule}if(void 0==a)throw"";let n={zero:["zero","none","other"],one:["one","singular","other"],two:["two","dual","few","paucal","many","plural","other"],few:["few","paucal","many","plural","other"],many:["many","plural","other"],other:["many","plural","other"]}[a];for(let[i,l]of[[t<0,["negative"]],[0==t,["zero","none"]],[1==Math.abs(t),["one","singular"]],[2==Math.abs(t),["two","dual"]],[Math.round(t)!=t,["fractional"]]])if(i)for(let r of l)n.includes(r)||n.unshift(r);return n}static langs=[];static translations={};static readLangs={};static supportedLanguage(t){return t=Talktalk.shortLang(t),Talktalk.readLangs[t]||Talktalk.readLangJson(t),t in Talktalk.translations}static readLangJson(t){Talktalk.checkSettingsJson();let a=new XMLHttpRequest;a.open("GET",Talktalk.directory+"/"+t+".json",!1),Talktalk.readLangs[t]=!0;try{if(a.send(null),200==a.status)try{let e=JSON.parse(a.responseText);Talktalk.insertTranslations(t,e)}catch(n){console.log("Incorrectly formatted JSON found in "+t+".json!\n"+n)}else throw"Error loading translations: "+a.status+" "+a.statusText}catch(i){}}static insertTranslations(t,a){for(let e in t in Talktalk.translations||(Talktalk.translations[t]={}),a)Talktalk.translations[t][e]=a[e]}static displayLanguage(){for(let t of Talktalk.langs)if(Talktalk.supportedLanguage(t))return t;throw"Somehow no language is supported (?)"}static fallbackLanguage="en";static forcedLanguages=[];static setupLangPreferences(){Talktalk.checkSettingsJson();try{Talktalk.forceLanguage((navigator.languages||[]).concat(navigator.language))}catch(t){Talktalk.langs=[Talktalk.fallbackLanguage]}}static forceLanguage(t){if("string"==typeof t&&(t=[t]),Array.isArray(t)){for(let a of(t.push(Talktalk.fallbackLanguage),Talktalk.langs=[],Talktalk.translations={},Talktalk.readLangs={},Talktalk.langsActuallySupported={},Talktalk.forcedLanguages.concat(...t)))if(a)for(a=a.split("-");a.length;){let e=a.join("-");!Talktalk.langs.includes(e)&&Talktalk.supportedLanguage(e)&&Talktalk.langs.push(e),a.pop()}0==Talktalk.langs.length&&(Talktalk.langs=[Talktalk.fallbackLanguage]),document.dir=Talktalk.writingDirection()}}static readTranslationKey(t,a){for(let e of Talktalk.langs)if((!a||e==a||e.startsWith(a+"-"))&&(Talktalk.readLangs[e]||Talktalk.readLangJson(e),e in Talktalk.translations&&t in Talktalk.translations[e]))return Talktalk.translations[e][t];throw"Could not translate key '"+t+"' into any language"}static talk(t,a={},e=0){if(e>Talktalk.maxRecursion)throw"Too much recursion";if(Talktalk.isSpecialType(t))return Talktalk.handleSpecialTypes(t,a);if(Array.isArray(t))return Talktalk.handleTranslatedText;let n=Talktalk.readTranslationKey(t);return Talktalk.isSpecialType(n)?Talktalk.handleSpecialTypes(n,a):Array.isArray(n)?n.map(t=>Talktalk.handleTranslatedText(t,a,e+1)).join(Talktalk.space()):Talktalk.handleTranslatedText(n,a,e+1)}static handleTranslatedText(t,a,e){if(e>Talktalk.maxRecursion)throw"Too much recursion";let n={};for(let i in a){let l=Talktalk.wrapInIndicator(i);for(let r of t.constructor==Object?Object.values(t):[t])Array.isArray(r)&&(r=r.join("\n")),r.includes(l)&&(n[l]=a[i])}if(Array.isArray(t))return t.map(t=>Talktalk.handleTranslatedText(t,a,e+1)).join(" ");if(t.constructor==Object){let s=Object.values(n).filter(t=>"number"==typeof t);if(0==s.length)throw"Using plural translation text "+JSON.stringify(t)+" but wasn't given a number";if(1!=s.length)throw"Using plural translation text "+JSON.stringify(t)+" but was given more than one number";let o=Talktalk.getPluralitySequence(s[0]);for(let c of o)if(c in t){t=t[c];break}if(t.constructor==Object)throw"Using plural translation text "+JSON.stringify(t)+" but number "+s[0]+" gave plural sequence "+o.join(", ")}if(Array.isArray(t))return t.map(t=>Talktalk.handleTranslatedText(t,a,e+1)).join(Talktalk.space());for(let u in n){let k=n[u];if(Talktalk.isSpecialType(k))k=Talktalk.handleSpecialTypes(k,a);else if("string"!=typeof k)throw"Cannot use replacement '"+k+"' of type "+typeof k;t=t.replaceAll(u,k)}return t}static isSpecialType(t){return"string"!=typeof t&&("number"==typeof t||t instanceof Date||t instanceof Talktalk.Duration||t instanceof Talktalk.Language||t instanceof Talktalk.Region||t instanceof Talktalk.Script||t instanceof Talktalk.Currency||t instanceof Talktalk.Calendar||t instanceof Talktalk.DateTimeField||t instanceof Talktalk.TimeOfDay||t instanceof Talktalk.AmountOfMoney||t instanceof Talktalk.AmountOfUnit)}static specialTypesFormatFields={date:["calendar","numberFormat","hour12","hourCycle","timeZone","weekday","era","year","month","day","dayPeriod","hour","minute","second","fractionalSecondDigits","timeZoneName"],timeOfDay:["calendar","numberFormat","hour12","hourCycle","timeZone","weekday","era","year","month","day","dayPeriod","hour","minute","second","fractionalSecondDigits","timeZoneName"],number:["numberingSystem","style","currency","currencyDisplay","currencySign","unit","unitDisplay","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","roundingPriority","roundingIncrement","roundingMode","trailingZeroDisplay","notation","compactDisplay","useGrouping","signDisplay"],amountOfMoney:["numberingSystem","currencyDisplay","currencySign","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","roundingPriority","roundingIncrement","roundingMode","trailingZeroDisplay","notation","compactDisplay","useGrouping","signDisplay"],amountOfUnit:["numberingSystem","unitDisplay","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","roundingPriority","roundingIncrement","roundingMode","trailingZeroDisplay","notation","compactDisplay","useGrouping","signDisplay"],duration:["numberingSystem","style","years","yearsDisplay","months","monthsDisplay","weeks","weekDisplay","days","daysDisplay","hours","hoursDisplay","minutes","minutesDisplay","seconds","secondsDisplay","milliseconds","millisecondsDisplay","microseconds","microsecondsDisplay","nanoseconds","nanosecondsDisplay","fractionalDigits"],language:["style","fallback","languageDisplay"],region:["style","fallback"],script:["style","fallback"],currency:["style","fallback"],calendar:["style","fallback"],dateTimeField:["style","fallback"]};static handleSpecialTypes(t,a){function e(e,n,i,l,r){try{for(let s of Talktalk.langs){let o=Talktalk.shortLang(s),c=i;for(let u of Talktalk.specialTypesFormatFields[e]){let k=e+":"+u;if(k in a)c[u]=a[k];else try{let g=Talktalk.readTranslationKey(k,o);if("string"!=typeof g)throw s+" settings for "+k+" isn't a string. Why would you do that";c[u]=g}catch(f){}}return new n(s,c)[l](r)}}catch(m){return t.toString()}}if("number"==typeof t)return e("number",Intl.NumberFormat,{},"format",t);if(t instanceof Date)return e("date",Intl.DateTimeFormat,{},"format",t);if(t instanceof Talktalk.Duration)return e("duration",Intl.DurationFormat,{},"format",t);if(t instanceof Talktalk.TimeOfDay)return e("timeOfDay",Intl.DateTimeFormat,{hour:"numeric",minute:"2-digit"},"format",t.date);if(t instanceof Talktalk.AmountOfMoney)return e("amountOfMoney",Intl.NumberFormat,{style:"currency",currency:t.code},"format",t.amount);if(t instanceof Talktalk.AmountOfUnit)return e("amountOfUnit",Intl.NumberFormat,{style:"unit",unit:t.code,unitDisplay:"long"},"format",t.amount);for(let[n,i]of[[Talktalk.Language,"language"],[Talktalk.Region,"region"],[Talktalk.Script,"script"],[Talktalk.Currency,"currency"],[Talktalk.Calendar,"calendar"],[Talktalk.DateTimeField,"dateTimeField"]])if(t instanceof n)return e(i,Intl.DisplayNames,{type:i},"of",t.code);throw t+" is not a special type"}static fillElements(t=document){for(let a of t.querySelectorAll("[data-talktalk]"))if("script"!=a.tagName.toLowerCase())try{a.innerText=Talktalk.talk(a.getAttribute("data-talktalk")),a.removeAttribute("data-talktalk")}catch(e){}}static Duration=class{constructor(...t){if("string"==typeof t[0]){let a=t[0].match(/(-)?P(?:([.,\d]+)Y)?(?:([.,\d]+)M)?(?:([.,\d]+)W)?(?:([.,\d]+)D)?(?:T(?:([.,\d]+)H)?(?:([.,\d]+)M)?(?:([.,\d]+)S)?)?/);a[1]&&(this.sign="+"==a[1]?1:-1),a[2]&&(this.years=parseFloat(a[2])),a[3]&&(this.months=parseFloat(a[3])),a[4]&&(this.weeks=parseFloat(a[4])),a[5]&&(this.days=parseFloat(a[5])),a[6]&&(this.hours=parseFloat(a[6])),a[7]&&(this.minutes=parseFloat(a[7])),a[8]&&(this.seconds=parseFloat(a[8]))}else if("number"==typeof t[0]&&t[1]){if(!["years","months","weeks","days","hours","minutes","seconds"].includes(t[1]))return!1;this[t[1]]=t[0]}else if("number"==typeof t[0]){t[0]<0&&(this.sign=-1,t[0]*=-1);let e=t[0]%60,n=Math.floor(t[0]/60)%60,i=Math.floor(t[0]/3600)%24,l=Math.floor(t[0]/86400);e&&(this.seconds=e),n&&(this.minutes=n),i&&(this.hours=i),l&&(this.days=l)}else throw"I don't know how to make a Talktalk.Duration out of "+t}};static Language=class{constructor(t){this.code=t}};static Region=class{constructor(t){this.code=t}};static Script=class{constructor(t){this.code=t}};static Currency=class{constructor(t){this.code=t}};static Calendar=class{constructor(t){this.code=t}};static DateTimeField=class{constructor(t){this.code=t}};static TimeOfDay=class{constructor(...t){if(void 0==t[0])this.date=new Date;else if(t[0]instanceof Date)this.date=t[0];else if("string"==typeof t[0])this.date=new Date(t[0]);else throw"Couldn't turn "+t+" into a Talktalk.TimeOfDay"}};static AmountOfMoney=class{constructor(t,a){if("number"!=typeof t||"string"!=typeof a)throw"Talktalk.AmountOfMoney must be created with number and string; you gave me "+t+" and "+a;this.amount=t,this.code=a}};static AmountOfUnit=class{constructor(t,a){if("number"!=typeof t||"string"!=typeof a)throw"Talktalk.AmountOfUnit must be created with number and string; you gave me "+t+" and "+a;this.amount=t,this.code=a}}}for(let className of["Duration","Language","Region","Script","Currency","Calendar","DateTimeField","TimeOfDay","AmountOfMoney","AmountOfUnit"])Talktalk[className[0].toLowerCase()+className.substring(1)]=function(...t){return new Talktalk[className](...t)},Talktalk[className].prototype.talk=function(t){return Talktalk.talk(this,t)};Talktalk.setupLangPreferences();try{let t=document.querySelector("script[data-talktalk]");Talktalk.directory=t.getAttribute("data-talktalk")}catch(a){}document.addEventListener("DOMContentLoaded",function(){Talktalk.fillElements()});